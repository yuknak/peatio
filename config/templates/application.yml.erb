defaults: &defaults
  TIMEZONE: 'Asia/Tokyo'

  DATABASE_HOST: localhost
  DATABASE_USER: ror
  DATABASE_PASS: ror

  # Configure Redis URL, for a TCP connection:
  # `redis://:[password]@[hostname]:[port]/[db]`
  # (password, port and database are optional).
  REDIS_URL:      redis://localhost:6379

  # Comma-separated list of administrators.
  ADMIN: admin@barong.io,philliparuais@gmail.com

  # Application URL configuration variables.
  URL_HOST:                api.wb2.rightsnetwork.net
  URL_SCHEME:              http
  FORCE_SECURE_CONNECTION: 'false' # Set to "true" to disable access via unsecured HTTP, send HSTS headers and use secure cookies.

  # Session lifetime in seconds.
  SESSION_LIFETIME: '3600'

  # Configuration variables for logger.
  LOG_LEVEL: debug # Default level for production is warn, otherwise â€“ debug.

  # Enabled OAuth2 provider.
  # Don't forget to check out configuration at config/initializers/omniauth.rb.
  OAUTH2_SIGN_IN_PROVIDER: barong

  # Configuration variables for sign in with Google.
  # See https://github.com/zquestz/omniauth-google-oauth2
  #GOOGLE_CLIENT_ID:
  #GOOGLE_CLIENT_SECRET:
  #GOOGLE_OAUTH2_REDIRECT_URL: ~ # Specify URL address to which user will be redirected after successful sign in.

  # Configuration variables for sign in with Auth0.
  # See https://github.com/auth0/omniauth-auth0
  AUTH0_OAUTH2_DOMAIN:
  AUTH0_OAUTH2_CLIENT_ID:
  AUTH0_OAUTH2_CLIENT_SECRET:
  AUTH0_OAUTH2_REDIRECT_URL:  ~ # Specify URL address to which user will be redirected after successful sign in.

  # Configuration variables for sign in with Barong OAuth2 server.
  # See https://github.com/rubykube/omniauth-barong
  #
  # Barong uses Doorkeeper under the hood so you can refer to it's docs any time.
  # See more information at https://github.com/doorkeeper-gem/doorkeeper/wiki/Testing-your-provider-with-OAuth2-gem
  #BARONG_OAUTH2_REDIRECT_URL: ~ # Specify URL address to which user will be redirected after successful sign in.
  BARONG_OAUTH2_REDIRECT_URL: http://api.wb2.rightsnetwork.net
  BARONG_DOMAIN: http://auth.wb2.rightsnetwork.net
  BARONG_CLIENT_ID: a68be319fca51caca60eed5711226e568bd1c1d13ff452b945515f1a6ffbaca4
  BARONG_CLIENT_SECRET: ab80e2c843861c4d23e63f5472cd1c9ee6f55e388863e21f22b03a9093977f29

  # Configuration variables for API CORS.
  #
  # Set list of allowed origins using the variable below.
  # By default it allows access to API from all origins.
  # See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin
  API_CORS_ORIGINS:           '*'
  API_CORS_ALLOW_CREDENTIALS: ~

  # Configuration variables for Sentry.
  SENTRY_DSN_BACKEND:  ~          # Specify Sentry DSN used for Rails application.
  SENTRY_DSN_FRONTEND: ~          # Specify Sentry DSN used for JavaScript application.

  # Customize page metadata like title, description & keywords for landing, cabinet & admin modules.
  METADATA_TITLE:       Peatio Exchange
  METADATA_DESCRIPTION: The Opensource Cryptocurrency Exchange
  METADATA_KEYWORDS:    Peatio,Opensource,Exchange,Cryptocurrency

  # Customize bank details which is shown at fiat deposit page. You are free to supply HTML here.
  BANK_DETAILS_HTML: |
    <div><strong>Use this bank to make a deposit:</strong></div>
    <div>Bank: National Bank of World</div>
    <div>Account: 1234567890</div>

  # Set to "true" to disable markets UI (admins still have access).
  DISABLE_MARKETS_UI: ~

  # Set to "true" to disable cabinet UI (admins still have access).
  DISABLE_CABINET_UI: ~

  # Configuration variables for JWT verification.
  # Get explanation at https://en.wikipedia.org/wiki/JSON_Web_Token.
  #
  # JWT_PUBLIC_KEY
  #
  # JWT provider uses private key for encoding JSON Web Tokens
  # while public key is used for decoding by resources.
  #
  # For example, Barong is JWT provider, Peatio is resource accepting JWT.
  # Barong must have private key installed, Peatio must have public key installed.
  #
  # You can generate keypair by running:
  #
  #   ruby -e "require 'openssl'; require 'base64'; OpenSSL::PKey::RSA.generate(2048).tap { |p| puts '', 'PRIVATE RSA KEY (URL-safe Base64 encoded, PEM):', '', Base64.urlsafe_encode64(p.to_pem), '', 'PUBLIC RSA KEY (URL-safe Base64 encoded, PEM):', '', Base64.urlsafe_encode64(p.public_key.to_pem) }"
  #
  # Copy the generated private key and put it's value to appropriate variable at JWT provider (for example, at Barong it will be JWT_SHARED_SECRET_KEY).
  # Copy the generated public key and put it's value to variable JWT_PUBLIC_KEY (at Peatio).
  #
  # Peatio and JWT provider should have the same keypair installed, or they would not understand each other.
  #
  # You may want to adjust key length or cipher.
  #
  # Development and test environments already don't include sample keys.
  #
  # You can generate valid JWT by running:
  #
  #   JWT.encode(payload, OpenSSL::PKey.read(Base64.urlsafe_decode64(ENCODED_PRIVATE_KEY)), ENV.fetch('JWT_ALGORITHM'))
  #
  # Replace ENCODED_PRIVATE_KEY with private key printed by previous command.
  #
  # You can decode JWT by running:
  #
  #   JWT.decode(token, OpenSSL::PKey.read(Base64.urlsafe_decode64(ENCODED_PUBLIC_KEY)), true, algorithms: [ENV.fetch('JWT_ALGORITHM')])
  #
  # To authenticate using JWT send it's value in "Authorization" header:
  #
  #   curl -H "Authorization: Bearer TOKEN" http://localhost:3000/api/v2/members/me
  #
  JWT_PUBLIC_KEY: LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFzVUR5MTdzZHFCS1VBM2RGYXJzNApZeDNSYy9hdXRwSXlFbGRSV3NPcVpMWlQvemVGcC9VZWc1OEt2OEgxcHdUQ3RMZ3hZZkdDaC9NSC84ckVtcDVUCnkrL1VFbERFeTBwM3JKRk5vRTd3UHdrWEFnODdtd3NiYWNycFZSeGdJUmpvNU1NTHZ1cnhNc3lHa2wyMnlEenYKTnJ6YUJDY1lkaWxuTGcvSmlxbS9YSVpRd2wyVWd5K3duL2VsQjBLNkFiZWhpUTMxZ3RiT0VIQW0zUWdCc09aVwo2a1ZNMVI4VzJKZkt5dFRvY29DYVB3UEJRUnRXYXVXWnlpQWYxcDc5TTV5ODJTNzlEUVJGOW9tVDc5SkdMZnpCCjZWbmtDZkVydEZvaFpQL3EyYTFtclk3bTUxTlpoUVcybFY3UXJzWjZSanBrNHFzVEJ6aDEzZkF4b2Z4T3hZcG0KWXdJREFRQUIKLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tCg==
  JWT_ALGORITHM:         RS256  # JWT signing algorithm (mandatory).
  JWT_ISSUER:            ~      # JWT issuer name (optional).
  JWT_AUDIENCE:          peatio,barong # Could be comma-separated value (optional).
  JWT_DEFAULT_LEEWAY:    ~      # Seconds (optional).
  JWT_ISSUED_AT_LEEWAY:  '180'    # Seconds (optional).
  JWT_EXPIRATION_LEEWAY: ~      # Seconds (optional).
  JWT_NOT_BEFORE_LEEWAY: ~      # Seconds (optional).

  # Capybara configuration variables.
  TEST_SERVER_HOST: 127.0.0.1
  TEST_SERVER_PORT: '3000'
  TEST_APP_HOST:    peatio.tech
  TEST_APP_PORT:    '80'

  # Scout APM configuration variables.
  SCOUT_KEY:       ~          # Your organization key for Scout APM. Found on the settings screen.
  SCOUT_APP_NAME:  ~          # Application name in APM Web UI.
  SCOUT_LOG_LEVEL: warn       # Verboseness of logs (debug, info, warn, error)
  SCOUT_ENV:       production # List of Rails environments for which Scout should be enabled.

  # Specify the code of currency which is used to display the equivalent of the amounts of other currencies.
  # The specified currency should exist in database.
  DISPLAY_CURRENCY: usd

  # Configuration variables for dynamic Barong levels (1.8+).
  MINIMUM_MEMBER_LEVEL_FOR_DEPOSIT:  '3'
  MINIMUM_MEMBER_LEVEL_FOR_WITHDRAW: '3'
  MINIMUM_MEMBER_LEVEL_FOR_TRADING:  '3'

  # Event API configuration.

  # JWT configuration.
  # You can generate keypair using:
  #
  #   ruby -e "require 'openssl'; require 'base64'; OpenSSL::PKey::RSA.generate(2048).tap { |p| puts '', 'PRIVATE RSA KEY (URL-safe Base64 encoded, PEM):', '', Base64.urlsafe_encode64(p.to_pem), '', 'PUBLIC RSA KEY (URL-safe Base64 encoded, PEM):', '', Base64.urlsafe_encode64(p.public_key.to_pem) }"
  #
  EVENT_API_JWT_PRIVATE_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb1FJQkFBS0NBUUVBc1VEeTE3c2RxQktVQTNkRmFyczRZeDNSYy9hdXRwSXlFbGRSV3NPcVpMWlQvemVGCnAvVWVnNThLdjhIMXB3VEN0TGd4WWZHQ2gvTUgvOHJFbXA1VHkrL1VFbERFeTBwM3JKRk5vRTd3UHdrWEFnODcKbXdzYmFjcnBWUnhnSVJqbzVNTUx2dXJ4TXN5R2tsMjJ5RHp2TnJ6YUJDY1lkaWxuTGcvSmlxbS9YSVpRd2wyVQpneSt3bi9lbEIwSzZBYmVoaVEzMWd0Yk9FSEFtM1FnQnNPWlc2a1ZNMVI4VzJKZkt5dFRvY29DYVB3UEJRUnRXCmF1V1p5aUFmMXA3OU01eTgyUzc5RFFSRjlvbVQ3OUpHTGZ6QjZWbmtDZkVydEZvaFpQL3EyYTFtclk3bTUxTloKaFFXMmxWN1Fyc1o2UmpwazRxc1RCemgxM2ZBeG9meE94WXBtWXdJREFRQUJBb0lCQUZFZmNvVDlaRU5KeldnUQpyRHArMlAyejVlcDIyZHRBNloydlROS0hmbko5WjlBRWJ5MUJaK2ZCWUVBRzJ4REhndjBHMThNRnIwSGRIcW9ZCitRWHl0Rk0vdmdWcjVjVk1uWnpqRzIzazh0dEdvN3NUa2FvUjJVZi96KzVlQURqbGw2RXJDek1qZjZSS0tzVE8KRXh0dGwrV3JaUFJGbUZKci9JYitQclV4bngwT3NCdU51QmZwbnFvSEJrV3lkQStNSjkwNjkyS3BwZEg4ZHZZVwpRYlJaQk1BMFA3VUcvQkVWSXJaYW1Ha1FJc0JpdWpiRExBdWllVm1uaW5meEJRUUVXZzhGL3hFcHdWMGU2aElWCjJSVmc3MHMxUkZob2tDZU84cUV6RWQ3OFRBRHVRVVAxNWJKT3lCVjZjTHVndjhFaFBYTS9wa2p4ZDFNNHF3K1EKbXFrZjN6RUNnWUVBNlNWTnRRTE1CYXhONE1INWpBVUhHV0toZmtiTE8rN2pncDlMQzlWOGR4QURjMXRwVjJvdQpBSU9YR1hqWmo5cXR6czRFK3QwSDB2T281S2xCYXNheTM2Q0FrcFB4WXloL2JVU2NIV1Z5WEo5emMzRGlobVE2CkR1UHUvS0xYeGx2aFY2T0x2YTZJcWdUM1h1Vlo2aUdSUXlGai9lU3ZNbE0ySEt2eEN6cmJ1dFVDZ1lFQXdxRU8KMFZZa3NQc0Y1Qzkvak1iMzJ3d3liQmRJMU1yM3JoR2VYMkVRN2crL0R5OGY5eTUrR3ZTeVNjZkFncitsNWZFSgpIeFhHRy9LMWlURWdFODdNZkdOZmhHalpwVDRla3VKemR3NW9oZHR2VkNDMGxFYW90M2ZaMGJUcHBCa2ZZWm0zCnVDd2tYZDNkRnZUU0ZZZWtQcTlDWkd1ZGhoTkE0Y1FWTGZ3S1NGY0NnWUVBeGt6aVFUbDF5c1Y1SDlnY3BzbUgKOWtGNzFtbmtacitUWndDUjFpam95bVFtYXpHdThaandNNk81R3dNOUdTd0lkVU9wM0sydS8vQWJFUkljLy9LdApKYVBnZDh1NW5udE5sdVNxWEI1ekhQREtROEFhQy9DbnFRNlpzT3ZZMTNCQ3hFWG9qNWNweW1LYS9HM2JBbGMyCnRJQnNDZ0UrT25Hb0xzN1lJSk1aWFZrQ2dZQVMySm1ndDZDeDZueTFqY3ZpQzlvd1Fjd1lIMkVVQ2R0VjVhcmEKUFlId0sySXF6RHRpS2dSWUE5M0h1eW51L3pQSFFrSEoyc2ZtS09oZk1ueVNybkdxa2N6TCs0TW50dzRxMXZhcgpUcC9jWmxVdlprTldJRWx5Q283eStYdXVRaWlCd09yRFVMTHN5L0QrcWhJMXQzNjEreTZJbnNzUUVva3owMUxoCnN3Z2ozUUovV2dERmVvS1kwVlZXT2hkOHBDcm1LM3pFaWZYRGNEUDk1M3BvMFR1cjRKU2wzZGExYkZSVVk4eXcKTk5XR2s5TVJJa0pPYUVZMGpDNXgyc2I2MWlGR2dhOXNkM1ZReC9hUk5TczF4R1BWVFh3a3YxOU1iTi9hRGVOWgp1Q0VzZThTT3YrR2xCWTV5WW5VR3lXWElDcGF6eVZBMlpUWW1JajR4U3ZvbFVCblRhZz09Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
  EVENT_API_JWT_ALGORITHM:   RS256

  # RabbitMQ configuration.
  # You can use just Â«EVENT_API_RABBITMQ_URLÂ» or specify configuration per separate variable.
  EVENT_API_RABBITMQ_URL:      ~
  EVENT_API_RABBITMQ_HOST:     localhost
  EVENT_API_RABBITMQ_PORT:     "5672"
  EVENT_API_RABBITMQ_USERNAME: guest
  EVENT_API_RABBITMQ_PASSWORD: guest

  RANGER_HOST: '0.0.0.0'
  RANGER_PORT: '8081'
  RANGER_CONNECT_SECURE: false

  BULLET: 'false'

development:
  <<: *defaults

test:
  <<: *defaults

production:
  <<: *defaults